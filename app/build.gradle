buildscript {

    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$rootProject.ext.kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$rootProject.ext.kotlin_version"
        classpath 'io.fabric.tools:gradle:1.21.2'
    }

}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'
/* The following should be moved from build ? maybe later */
def VUFORIA_SDK_DIR = '..'
def NATIVE_LIB_DIR = 'build/lib'
def JAR_DIR = 'build/java/vuforia'

repositories {
    mavenCentral()
    maven {url "https://jitpack.io"}
    maven { url 'https://maven.fabric.io/public' }
}
// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir "$VUFORIA_SDK_DIR/$NATIVE_LIB_DIR/"
    }
    defaultConfig {
        applicationId 'com.marked.pixsee'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    archivesBaseName = rootProject.projectDir.getName()
    buildTypes {
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            useProguard true
            proguardFiles(files { file('./proguard').listFiles() })
//            ndk {
//                abiFilters "armeabi-v7a"
//            }
//            multiDexEnabled true
        }
        debug {
            debuggable true
//            shrinkResources true
//            minifyEnabled true
//            proguardFiles(files { file('./proguard').listFiles() })
//            multiDexEnabled true

        }
    }
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
            minSdkVersion 21
        }
        prod {
            minSdkVersion 21
        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    def dependency = rootProject.ext
    def app = dependency.dependencies
    def test = dependency.testDependencies
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile('io.socket:socket.io-client:0.6.3') {
        exclude group: 'org.json', module: 'json'
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    compile app.supportAppcompat
    compile app.ankoSQL
    compile app.gcmService
    compile app.appInvitesService
    compile app.visionService
    compile app.supportRecyclerView
    compile app.supportDesign
    compile app.chatMessageView
    compile app.dilatingProgressBar
    compile app.fab
//    compile app.sideMenu
    compile app.fresco
    compile app.frescoImgPipeline
    compile app.rxAndroid
    compile app.retrofit
    compile app.retrofitConverterGson
    compile app.retrofitRX
    compile app.okHttpLogger
    compile app.subSamplingScaleImage
    compile app.visionService
    compile app.dagger
    compile app.rajawali
    compile app.rxPermissions
    compile app.facebook

    apt app.daggerCompiler
    provided app.daggerCompiler
    provided app.glassFishAnnotations

    //testing
    testCompile test.jUnit
    testCompile test.mockito
    testCompile test.hamcrest
    // Espresso UI Testing dependencies.
    androidTestCompile test.espressoCore
    androidTestCompile test.espressoIntents
    androidTestCompile test.espressoContrib
    androidTestCompile test.mockito
    androidTestCompile test.supportAnnotation
    androidTestCompile test.runner
    androidTestCompile test.rules
}


apply plugin: 'com.google.gms.google-services'

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
//configurations.compile.dependencies.each { compileDependency ->
//    println "Excluding compile dependency: ${compileDependency.getName()}"
//    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
//        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
//    }
//}